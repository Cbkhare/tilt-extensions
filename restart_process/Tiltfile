# -*- mode: Python -*-

RESTART_FILE = '/.restart-proc'
TYPE_RESTART_CONTAINER_STEP = 'live_update_restart_container_step'

DB_KWARGS_BLACKLIST = [
    # since we'll be passing `dockerfile_contents` when building the
    # child image, remove any kwargs that might conflict
    'dockerfile', 'dockerfile_contents',

    # 'target' isn't relevant to our child build--if we pass this arg,
    # Docker will just fail to find the specified stage and error out
    'target',
]

CHILD_IMG_DOCKERFILE = '''
    FROM tiltdev/restart-helper:2020-04-27 as restart-helper

    FROM {}
    RUN ["touch", "{}"]
    COPY --from=restart-helper /tilt-restart-wrapper /
    COPY --from=restart-helper /entr /
  '''


def validate_live_update(lu, fn_name):
    if len(lu) == 0:
        fail("`{}` requires at least one live_update step".format(fn_name))
    for step in lu:
        if type(step) == TYPE_RESTART_CONTAINER_STEP:
            fail("`{}` is not compatible with live_update step: `restart_container()` " +
                 "(this extension is meant to REPLACE restart_container() )".format(fn_name))


def wrap_entrypoint(entrypoint, restart_file):
    """
    Change the entrypoint to use `tilt-restart-wrapper`.
    `tilt-restart-wrapper` makes use of `entr` (https://github.com/eradman/entr/) to
    re-execute $entrypoint whenever $restart_file changes.
    """
    if type(entrypoint) == type(""):
        # Tilt specifies that an entrypoint passed as string will be executed as a shell command;
        # replicate that behavior as closely as possible
        return ["/tilt-restart-wrapper", "--watch_file={}".format(restart_file), "sh", "-c", entrypoint]
    elif type(entrypoint) == type([]):
        return ["/tilt-restart-wrapper", "--watch_file={}".format(restart_file)] + entrypoint
    else:
        fail("`entrypoint` must be a string or list of strings: got {}".format(type(entrypoint)))


def add_restart_to_live_update(live_update, restart_file):
    """
    Add a `run` step to the end of the given live_update to trigger a process restart.

    In particular, this is a `run` step which modifies $restart_file, which in turn
    triggers the process wrapper to rerun $entrypoint.

    NB: write `date` instead of just `touch`ing because `entr` doesn't respond
    to timestamp changes, only writes (see https://github.com/eradman/entr/issues/32)
    """
    return live_update + [run('date > {}'.format(restart_file))]

def docker_build_with_restart(ref, context, entrypoint, live_update,
                              base_suffix='-base', restart_file=RESTART_FILE, **kwargs):
    """Wrap a docker_build call and its associated live_update steps so that the last step
    of any live update is to rerun the given entrypoint.

     Args:
      ref: name for this image (e.g. 'myproj/backend' or 'myregistry/myproj/backend'); as the parameter of the same name in docker_build
      context: path to use as the Docker build context; as the parameter of the same name in docker_build
      entrypoint: the command to be (re-)executed when the container starts or when a live_update is run
      live_update: set of steps for updating a running container; as the parameter of the same name in docker_build
      base_suffix: suffix for naming the base image, applied as {ref}{base_suffix}
      restart_file: file that Tilt will update during a live_update to signal the entrypoint to rerun
      **kwargs: will be passed to the underlying `docker_build` call
    """

    # first, validate the given live_update steps
    validate_live_update(live_update, "docker_build_with_restart")

    # rename the original image to make it a base image and declare a docker_build for it
    base_ref = '{}{}'.format(ref, base_suffix)
    docker_build(base_ref, context, **kwargs)

    # declare a new docker build that adds a static binary of tilt-restart-wrapper
    # (which makes use of `entr` to watch files and restart processes) to the user's image
    df = CHILD_IMG_DOCKERFILE.format(base_ref, restart_file)

    # Clean kwargs for building the child image (which builds on user's specified
    # image and copies in Tilt's restart wrapper). In practice, this means removing
    # kwargs that were relevant to building the user's specified image but are NOT
    # relevant to building the child image / may conflict with args we specifically
    # pass for the child image.
    cleaned_kwargs = {k: v for k, v in kwargs.items() if k not in DB_KWARGS_BLACKLIST}

    wrapped_entrypoint = wrap_entrypoint(entrypoint, restart_file)
    live_update_with_restart = add_restart_to_live_update(live_update, restart_file)

    docker_build(ref, context, entrypoint=wrapped_entrypoint, dockerfile_contents=df,
                 live_update=live_update_with_restart, **cleaned_kwargs)


"""
NOTE(maia): this func is a WIP / being temporarily abandoned, because custom_build
has too many weird edge cases to block the rest of this extension on a one-size-fits-all
solution.

Current state:
- requires `skips_local_docker=False`
- requires use of $EXPECTED_REF rather than `tag` param (b/c we rename the image
  we're building; if user has this name hardcoded somewhere they're SOL)
- stuck on how to handle `ignore` param. See writeup:
  https://app.clubhouse.io/windmill/story/6860/version-of-docker-build-with-restart-for-custom-build#activity-7448
"""
def custom_build_with_restart(ref, command, deps, entrypoint, live_update,
                              base_suffix='-base', restart_file=RESTART_FILE, **kwargs):
    """Wrap a custom_build call and its associated live_update steps so that the last step
    of any live update is to rerun the given entrypoint.

    Note that custom_build_with_restart does not support:
    - custom_build's `tag` parameter (the `command` must make use of `$EXPECTED_REF`)
    - `skips_local_docker=True`

     Args:
      ref: name for this image (e.g. 'myproj/backend' or 'myregistry/myproj/backend'); as the parameter of the same name in custom_build
      command: a command that, when run in the shell, builds an image puts it in the registry as `ref`; as the parameter of the same name in custom_build
      deps: a list of files or directories to be added as dependencies to this image; as the parameter of the same name in custom_build
      entrypoint: the command to be (re-)executed when the container starts or when a live_update is run
      live_update: set of steps for updating a running container; as the parameter of the same name in docker_build
      base_suffix: suffix for naming the base image, applied as {ref}{base_suffix}
      restart_file: file that Tilt will update during a live_update to signal the entrypoint to rerun
      **kwargs: will be passed to the underlying `docker_build` call
    """

    # first, validate the inputs
    validate_live_update(live_update, "custom_build_with_restart")
    if kwargs.get('skips_local_docker'):
        fail('`custom_build_with_restart` cannot be called with `skips_local_docker=True`; ' +
             'image must be present locally for post-processing')
    elif kwargs.get('tag'):
        fail('`custom_build_with_restart` does not yet support the `tag` param, please ' +
             'use the $EXPECTED_REF environment variable instead, or restart your ' +
             'process another way')

    # rename the original image to make it a base image, build it via the
    # user-specified custom_build
    base_ref = '{}{}'.format(ref, base_suffix)
    custom_build(base_ref, command, deps, **kwargs)

    # declare a new docker build that adds a static binary of tilt-restart-wrapper
    # (which makes use of `entr` to watch files and restart processes) to the user's image
    df = CHILD_IMG_DOCKERFILE.format(base_ref, restart_file)

    wrapped_entrypoint = wrap_entrypoint(entrypoint, restart_file)
    live_update_with_restart = add_restart_to_live_update(live_update, restart_file)

    docker_build(ref,
        # let the parent image take care of the watching (with deps/ignore/only);
        # fake the context and ignore everything
        '.', ignore="*",
        dockerfile_contents=df,
        entrypoint=wrapped_entrypoint, live_update=live_update_with_restart,
    )
